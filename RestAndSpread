
function filterOutOdds() {
  var nums = Array.prototype.slice.call(arguments);
  return nums.filter(function(num) {
    return num % 2 === 0
  });
}

 filterOutOdds (...nums){
  return nums.filter(num=> num%2 === o);
 }
//========or=========
const filterOutOdds = (...args) => args.filter(v => v % 2 === 0)


 const findMin = (...nums)=>
  Math.min (...nums)
  findMin(1,4,12,-3) // -3
  findMin(1,-1) // -1
  findMin(3,1) // 1

const mergeObjects = (objOne, objTwo) => ({...objOne, ...objTwo});


const doubleAndReturnArgs = (arr, ...args) => [...arr, ...args.map(v => v*2)];



const  removeRandom = items => {
  let idx = math.floor(Nath.random()*items.length);
 return [...items.slice(0, idx), ...items.slice(idx + 1)];
}




const  extend = (array1, array2) =>{
  return [...array1, ...array2];
}



/** Return a new object with all the keys and values
from obj and a new key/value pair */

const addKeyVal = (obj, key, val) => {
  let newObj = { ...obj };
  newObj[key] = val;
  return newObj;
}



/** Return a new object with a key removed. */

const removeKey = (obj, key) => {
  let newObj = { ...obj }
  delete newObj[key]
  return newObj;

}


/** Combine two objects and return a new object. */

const  combine = (obj1, obj2) => {
return {...obj1, ...obj2};

}


/** Return a new object with a modified key and value. */

const update = (obj, key, val) => {
  let newObj = { ...obj }
  newObj[key] = val;
  return newObj;

}
